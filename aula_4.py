# -*- coding: utf-8 -*-
"""Aula-4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BeNaJnNBhz6PY6gZbMqm9WLMEaUTkd24

## Diamonds Dataset
https://ggplot2.tidyverse.org/reference/diamonds.html  

**A data frame with 53940 rows and 10 variables:**

### price
*   price in US dollars ($326–$18,823)

### carat
*   weight of the diamond (0.2–5.01)

### cut
*   quality of the cut (Fair, Good, Very Good, Premium, Ideal)

### color
*   diamond colour, from D (best) to J (worst)

### clarity
*   a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))

### x
*   length in mm (0–10.74)

### y
*   width in mm (0–58.9)

### z
*   depth in mm (0–31.8)

### depth
*   total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)

### table
*   width of top of diamond relative to widest point (43–95)
"""

import pandas as pd
import seaborn as sns

df = sns.load_dataset('diamonds')

df.head()

df.info()

df['color'].value_counts()

df[['clarity', 'color', 'depth']].head()

df.loc[19876]

df.iloc[18643]

df.iloc[:5, :3]

df[['clarity', 'color', 'depth']].iloc[5]

premium = df[df['cut'] == 'Premium']
print(premium)

good = df[df['cut'] == 'Good']
print(good)



import matplotlib.pyplot as plt

# Calculate the count of each color
color_counts = df['color'].value_counts()

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(color_counts, labels=color_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Diamond Colors')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Define a color palette that approximates the diamond color grades from D to J.
# D: Colorless (approximated by a light blue)
# E: Colorless (approximated by a slightly darker blue)
# F: Colorless (approximated by a pale blue)
# G: Near colorless (approximated by a very pale yellow)
# H: Near colorless (approximated by a light yellow)
# I: Faint yellow (approximated by a yellow)
# J: Very light yellow (approximated by an orange-yellow)
diamond_colors_palette = ['#ADD8E6', '#87CEFA', '#B0E0E6', '#FFFFE0', '#FFFACD', '#FFFF00', '#FFA500']

# Reorder the palette to match the color categories from df['color'].value_counts()
# The order is G, E, F, H, D, I, J
ordered_palette = [diamond_colors_palette[3], # G
                   diamond_colors_palette[1], # E
                   diamond_colors_palette[2], # F
                   diamond_colors_palette[4], # H
                   diamond_colors_palette[0], # D
                   diamond_colors_palette[5], # I
                   diamond_colors_palette[6]] # J

# Create a pie chart with the specified color palette
plt.figure(figsize=(8, 8))
plt.pie(color_counts, labels=color_counts.index, autopct='%1.1f%%', startangle=90, colors=ordered_palette)
plt.title('Distribution of Diamond Colors')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

df.isnull().sum()

df.groupby('color')['price'].mean()

df.groupby('clarity')['price'].mean()

df.groupby(['color', 'clarity'])['price'].mean().sort_values(ascending=False)

df.groupby(['color', 'clarity']).agg(
    mean_price=('price', 'mean'),
    median_price=('price', 'median'),
    min_price=('price', 'min'),
    max_price=('price', 'max')
)

df.groupby(['color', 'clarity']).agg(
    mean_price=('price', 'mean'),
    median_price=('price', 'median'),
    min_price=('price', 'min'),
    max_price=('price', 'max')
).sort_values(by='max_price', ascending=False)